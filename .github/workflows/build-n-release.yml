name: Manual Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.1.0)'
        required: true
        default: '0.1.0'
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Build project
        run: npm run build

      - name: Update version in build files
        env:
          NGINXUI_VERSION: ${{ github.event.inputs.version }}
        run: |
          echo "Updating NginxUI version to $NGINXUI_VERSION"
          # Update version in package.json if needed
          if [ -f "package.json" ]; then
            npm version $NGINXUI_VERSION --no-git-tag-version
          fi
          # Update version in any config files in dist folder
          find dist -name "*.sh" -o -name "*.conf" | xargs sed -i "s/VERSION=.*/VERSION=\"$NGINXUI_VERSION\"/g" || true

      - name: Create release archive
        run: |
          mkdir -p release
          tar --transform 's|^|nginxui/|' -czf release/asuswrt-merlin-nginxui.tar.gz -C dist .
          echo "RELEASE_FILE=asuswrt-merlin-nginxui.tar.gz" >> $GITHUB_ENV
          echo "RELEASE_PATH=release/asuswrt-merlin-nginxui.tar.gz" >> $GITHUB_ENV

      - name: Read Changelog (Latest Version Only)
        id: read_changelog
        run: |
          echo "Extracting latest changelog entry..."
          if [ -f "CHANGELOG.md" ]; then
            CHANGELOG=$(awk '/^## \[/{if (found++) exit} found {print}' CHANGELOG.md)
            if [ -z "$CHANGELOG" ]; then
              echo "No changelog entry found, generating default release notes"
              CHANGELOG="## What's Changed\n\n### Features\n- Built from commit: ${{ github.sha }}\n- Build date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n\n### Installation\n1. Download the \`asuswrt-merlin-nginxui.tar.gz\` file\n2. Extract to your router's appropriate directory\n3. Follow the installation instructions in the README"
            fi
          else
            echo "CHANGELOG.md not found, generating default release notes"
            CHANGELOG="## What's Changed\n\n### Features\n- Built from commit: ${{ github.sha }}\n- Build date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n\n### Installation\n1. Download the \`asuswrt-merlin-nginxui.tar.gz\` file\n2. Extract to your router's appropriate directory\n3. Follow the installation instructions in the README"
          fi
          echo "changelog<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "![Downloads](https://img.shields.io/github/downloads/NasPilot/asuswrt-merlin-nginxui/v${{ github.event.inputs.version }}/asuswrt-merlin-nginxui.tar.gz)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: 'NginxUI Release ${{ github.event.inputs.version }}'
          draft: ${{ github.event.inputs.draft == 'true' }}
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          body: ${{ env.changelog }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.RELEASE_PATH }}
          asset_name: ${{ env.RELEASE_FILE }}
          asset_content_type: application/gzip