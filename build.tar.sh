#!/bin/bash

# NginxUI Build Script
# Based on XrayUI architecture for ASUSWRT-Merlin

set -e

# Configuration
NGINXUI_VERSION="1.0.0"
BUILD_DIR="build"
DIST_DIR="dist"
TARBALL_NAME="asuswrt-merlin-nginxui.tar.gz"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check Node.js
    if ! command -v node >/dev/null 2>&1; then
        log_error "Node.js is not installed"
        exit 1
    fi
    
    # Check npm
    if ! command -v npm >/dev/null 2>&1; then
        log_error "npm is not installed"
        exit 1
    fi
    
    # Check if package.json exists
    if [ ! -f "package.json" ]; then
        log_error "package.json not found"
        exit 1
    fi
    
    log_success "Prerequisites check passed"
}

# Clean previous builds
clean_build() {
    log_info "Cleaning previous builds..."
    
    rm -rf "$BUILD_DIR"
    rm -rf "$DIST_DIR"
    rm -f "$TARBALL_NAME"
    
    log_success "Cleaned previous builds"
}

# Install dependencies
install_dependencies() {
    log_info "Installing dependencies..."
    
    npm ci --silent
    
    log_success "Dependencies installed"
}

# Build frontend
build_frontend() {
    log_info "Building frontend..."
    
    # Run Vite build
    npm run build
    
    if [ ! -d "$DIST_DIR" ]; then
        log_error "Frontend build failed - dist directory not found"
        exit 1
    fi
    
    log_success "Frontend built successfully"
}

# Prepare backend
prepare_backend() {
    log_info "Preparing backend files..."
    
    # Create build directory
    mkdir -p "$BUILD_DIR"
    
    # Copy backend scripts
    cp -r src/backend/* "$BUILD_DIR/"
    
    # Update version in all relevant files
    find "$BUILD_DIR" -name "*.sh" -type f -exec sed -i '' "s/NGINXUI_VERSION=.*/NGINXUI_VERSION=\"$NGINXUI_VERSION\"/g" {} \;
    
    # Make scripts executable
    find "$BUILD_DIR" -name "*.sh" -type f -exec chmod +x {} \;
    
    log_success "Backend prepared"
}

# Integrate frontend with backend
integrate_frontend() {
    log_info "Integrating frontend with backend..."
    
    # Create web directory in build
    mkdir -p "$BUILD_DIR/web"
    
    # Copy built frontend files
    cp -r "$DIST_DIR"/* "$BUILD_DIR/web/"
    
    # Inline CSS into HTML for better performance
    if [ -f "$BUILD_DIR/web/index.html" ]; then
        # Find CSS files and inline them
        for css_file in "$BUILD_DIR/web/assets"/*.css; do
            if [ -f "$css_file" ]; then
                css_content=$(cat "$css_file")
                # Replace CSS link with inline style
                css_filename=$(basename "$css_file")
                sed -i '' "s|<link[^>]*href=\"[^\"]*$css_filename\"[^>]*>|<style>$css_content</style>|g" "$BUILD_DIR/web/index.html"
                # Remove the CSS file
                rm "$css_file"
            fi
        done
    fi
    
    # Create web manifest
    cat > "$BUILD_DIR/web/manifest.json" << EOF
{
    "name": "NginxUI",
    "short_name": "NginxUI",
    "description": "Nginx Management Interface for ASUSWRT-Merlin",
    "version": "$NGINXUI_VERSION",
    "start_url": "/",
    "display": "standalone",
    "theme_color": "#2196F3",
    "background_color": "#ffffff",
    "icons": [
        {
            "src": "favicon.ico",
            "sizes": "32x32",
            "type": "image/x-icon"
        }
    ]
}
EOF
    
    log_success "Frontend integrated"
}

# Create installation package
create_package() {
    log_info "Creating installation package..."
    
    # Create main installation script
    cat > "$BUILD_DIR/install_nginxui.sh" << 'EOF'
#!/bin/sh

# NginxUI Installation Script
# Auto-generated by build script

set -e

# Extract and install
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
INSTALL_DIR="/opt/share/nginxui"

# Create installation directory
mkdir -p "$INSTALL_DIR"

# Copy files
cp -r "$SCRIPT_DIR"/* "$INSTALL_DIR/"

# Make scripts executable
find "$INSTALL_DIR" -name "*.sh" -type f -exec chmod +x {} \;

# Run installation
"$INSTALL_DIR/nginxui.sh" install

echo "NginxUI installation completed!"
echo "Access the web interface at: http://$(nvram get lan_ipaddr):8088"
EOF
    
    chmod +x "$BUILD_DIR/install_nginxui.sh"
    
    # Create README for the package
    cat > "$BUILD_DIR/README.txt" << EOF
NginxUI v$NGINXUI_VERSION for ASUSWRT-Merlin
============================================

Installation:
1. Extract this package to your router
2. Run: ./install_nginxui.sh
3. Access web interface at: http://[router-ip]:8088

Manual Installation:
1. Copy all files to /opt/share/nginxui/
2. Run: /opt/share/nginxui/nginxui.sh install

Usage:
- Start: /opt/share/nginxui/nginxui.sh start
- Stop: /opt/share/nginxui/nginxui.sh stop
- Status: /opt/share/nginxui/nginxui.sh status
- Help: /opt/share/nginxui/nginxui.sh help

Requirements:
- ASUSWRT-Merlin firmware
- Entware installed
- JFFS partition enabled

For more information, visit:
https://github.com/your-repo/nginxui
EOF
    
    log_success "Installation package created"
}

# Create tarball
create_tarball() {
    log_info "Creating tarball..."
    
    # Create tarball with proper structure
    tar -czf "$TARBALL_NAME" -C "$BUILD_DIR" .
    
    # Get file size
    local size
    if command -v du >/dev/null 2>&1; then
        size=$(du -h "$TARBALL_NAME" | cut -f1)
    else
        size="unknown"
    fi
    
    log_success "Tarball created: $TARBALL_NAME ($size)"
}

# Verify build
verify_build() {
    log_info "Verifying build..."
    
    # Check if tarball exists
    if [ ! -f "$TARBALL_NAME" ]; then
        log_error "Tarball not found"
        exit 1
    fi
    
    # Check tarball contents
    local contents
    contents=$(tar -tzf "$TARBALL_NAME" | head -10)
    
    # Verify essential files
    if ! tar -tzf "$TARBALL_NAME" | grep -q "nginxui.sh"; then
        log_error "Main script not found in tarball"
        exit 1
    fi
    
    if ! tar -tzf "$TARBALL_NAME" | grep -q "web/index.html"; then
        log_error "Web interface not found in tarball"
        exit 1
    fi
    
    log_success "Build verification passed"
}

# Cleanup
cleanup() {
    log_info "Cleaning up temporary files..."
    
    rm -rf "$BUILD_DIR"
    rm -rf "$DIST_DIR"
    
    log_success "Cleanup completed"
}

# Show build summary
show_summary() {
    echo ""
    log_success "=== Build Summary ==="
    echo "Version: $NGINXUI_VERSION"
    echo "Package: $TARBALL_NAME"
    
    if [ -f "$TARBALL_NAME" ]; then
        local size
        if command -v du >/dev/null 2>&1; then
            size=$(du -h "$TARBALL_NAME" | cut -f1)
            echo "Size: $size"
        fi
        
        local file_count
        file_count=$(tar -tzf "$TARBALL_NAME" | wc -l)
        echo "Files: $file_count"
    fi
    
    echo ""
    echo "Installation:"
    echo "1. Upload $TARBALL_NAME to your router"
    echo "2. Extract: tar -xzf $TARBALL_NAME"
    echo "3. Install: ./install_nginxui.sh"
    echo ""
}

# Main build process
main() {
    log_info "Starting NginxUI build process..."
    echo "Version: $NGINXUI_VERSION"
    echo ""
    
    check_prerequisites
    clean_build
    install_dependencies
    build_frontend
    prepare_backend
    integrate_frontend
    create_package
    create_tarball
    verify_build
    cleanup
    show_summary
    
    log_success "Build completed successfully!"
}

# Handle script arguments
case "${1:-}" in
    "clean")
        clean_build
        ;;
    "frontend")
        build_frontend
        ;;
    "backend")
        prepare_backend
        ;;
    "package")
        create_package
        ;;
    "verify")
        verify_build
        ;;
    "help"|"--help"|"-h")
        echo "NginxUI Build Script"
        echo ""
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  (none)    Full build process"
        echo "  clean     Clean build artifacts"
        echo "  frontend  Build frontend only"
        echo "  backend   Prepare backend only"
        echo "  package   Create package only"
        echo "  verify    Verify build"
        echo "  help      Show this help"
        echo ""
        ;;
    "")
        main
        ;;
    *)
        log_error "Unknown command: $1"
        echo "Use '$0 help' for usage information"
        exit 1
        ;;
esac
